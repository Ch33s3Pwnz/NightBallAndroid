<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(bluewhale, 1, true)

timing = 60
alarm[0] = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var star = random(16)
speedmod = 1111 / (timing + 30)

if star &lt; 4 {
    if star &lt; 1 {
        with (instance_create(-90, -160, stargreenO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    } else if star &lt; 2 {
        with (instance_create(-90, -160, staryellowO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    } else if star &lt; 3 {
        with (instance_create(-90, -160, starredO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    } else {
        with (instance_create(-90, -160, starblueO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    }
} else if star &lt; 8 {
    if star &lt; 5 {
        with (instance_create(1170, -160, stargreenO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    } else if star &lt; 6 {
        with (instance_create(1170, -160, staryellowO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    } else if star &lt; 7 {
        with (instance_create(1170, -160, starredO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    } else {
        with (instance_create(1170, -160, starblueO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    }
} else if star &lt; 12 {
    if star &lt; 9 {
        with (instance_create(-90, 2080, stargreenO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    } else if star &lt; 10 {
        with (instance_create(-90, 2080, staryellowO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    } else if star &lt; 11 {
        with (instance_create(-90, 2080, starredO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    } else {
        with (instance_create(-90, 2080, starblueO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    }
} else {
    if star &lt; 13 {
        with (instance_create(1170, 2080, stargreenO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    } else if star &lt; 14 {
        with (instance_create(1170, 2080, staryellowO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    } else if star &lt; 15 {
        with (instance_create(1170, 2080, starredO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    } else {
        with (instance_create(1170, 2080, starblueO)) {
            move_towards_point(560, 960, other.speedmod)
        }
    }
}


if timing &gt; 36 {
    timing -= 1.5
} else if timing &gt; 24 {
    timing -= 1
}
alarm[0] = timing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
